#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'group_types'

module Blublu
  module Group
    class Client
      include ::Thrift::Client

      def create(token, requestTime, sign, groupName)
        send_create(token, requestTime, sign, groupName)
        return recv_create()
      end

      def send_create(token, requestTime, sign, groupName)
        send_message('create', Create_args, :token => token, :requestTime => requestTime, :sign => sign, :groupName => groupName)
      end

      def recv_create()
        result = receive_message(Create_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create failed: unknown result')
      end

      def searchMyGroup(token, requestTime, sign, searchParam)
        send_searchMyGroup(token, requestTime, sign, searchParam)
        return recv_searchMyGroup()
      end

      def send_searchMyGroup(token, requestTime, sign, searchParam)
        send_message('searchMyGroup', SearchMyGroup_args, :token => token, :requestTime => requestTime, :sign => sign, :searchParam => searchParam)
      end

      def recv_searchMyGroup()
        result = receive_message(SearchMyGroup_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchMyGroup failed: unknown result')
      end

      def search(token, requestTime, sign, groupName)
        send_search(token, requestTime, sign, groupName)
        return recv_search()
      end

      def send_search(token, requestTime, sign, groupName)
        send_message('search', Search_args, :token => token, :requestTime => requestTime, :sign => sign, :groupName => groupName)
      end

      def recv_search()
        result = receive_message(Search_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search failed: unknown result')
      end

      def inviteToJoin(token, requestTime, sign, email, groupId)
        send_inviteToJoin(token, requestTime, sign, email, groupId)
        return recv_inviteToJoin()
      end

      def send_inviteToJoin(token, requestTime, sign, email, groupId)
        send_message('inviteToJoin', InviteToJoin_args, :token => token, :requestTime => requestTime, :sign => sign, :email => email, :groupId => groupId)
      end

      def recv_inviteToJoin()
        result = receive_message(InviteToJoin_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inviteToJoin failed: unknown result')
      end

      def applyToJoin(token, requestTime, sign, groupId)
        send_applyToJoin(token, requestTime, sign, groupId)
        return recv_applyToJoin()
      end

      def send_applyToJoin(token, requestTime, sign, groupId)
        send_message('applyToJoin', ApplyToJoin_args, :token => token, :requestTime => requestTime, :sign => sign, :groupId => groupId)
      end

      def recv_applyToJoin()
        result = receive_message(ApplyToJoin_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'applyToJoin failed: unknown result')
      end

      def passInviteOrApply(token, requestTime, sign, resouceId)
        send_passInviteOrApply(token, requestTime, sign, resouceId)
        return recv_passInviteOrApply()
      end

      def send_passInviteOrApply(token, requestTime, sign, resouceId)
        send_message('passInviteOrApply', PassInviteOrApply_args, :token => token, :requestTime => requestTime, :sign => sign, :resouceId => resouceId)
      end

      def recv_passInviteOrApply()
        result = receive_message(PassInviteOrApply_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'passInviteOrApply failed: unknown result')
      end

      def refuseInviteOrApply(token, requestTime, sign, resouceId)
        send_refuseInviteOrApply(token, requestTime, sign, resouceId)
        return recv_refuseInviteOrApply()
      end

      def send_refuseInviteOrApply(token, requestTime, sign, resouceId)
        send_message('refuseInviteOrApply', RefuseInviteOrApply_args, :token => token, :requestTime => requestTime, :sign => sign, :resouceId => resouceId)
      end

      def recv_refuseInviteOrApply()
        result = receive_message(RefuseInviteOrApply_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'refuseInviteOrApply failed: unknown result')
      end

      def myGroupFeeds(token, requestTime, sign)
        send_myGroupFeeds(token, requestTime, sign)
        return recv_myGroupFeeds()
      end

      def send_myGroupFeeds(token, requestTime, sign)
        send_message('myGroupFeeds', MyGroupFeeds_args, :token => token, :requestTime => requestTime, :sign => sign)
      end

      def recv_myGroupFeeds()
        result = receive_message(MyGroupFeeds_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'myGroupFeeds failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_create(seqid, iprot, oprot)
        args = read_args(iprot, Create_args)
        result = Create_result.new()
        begin
          result.success = @handler.create(args.token, args.requestTime, args.sign, args.groupName)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'create', seqid)
      end

      def process_searchMyGroup(seqid, iprot, oprot)
        args = read_args(iprot, SearchMyGroup_args)
        result = SearchMyGroup_result.new()
        begin
          result.success = @handler.searchMyGroup(args.token, args.requestTime, args.sign, args.searchParam)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'searchMyGroup', seqid)
      end

      def process_search(seqid, iprot, oprot)
        args = read_args(iprot, Search_args)
        result = Search_result.new()
        begin
          result.success = @handler.search(args.token, args.requestTime, args.sign, args.groupName)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'search', seqid)
      end

      def process_inviteToJoin(seqid, iprot, oprot)
        args = read_args(iprot, InviteToJoin_args)
        result = InviteToJoin_result.new()
        begin
          result.success = @handler.inviteToJoin(args.token, args.requestTime, args.sign, args.email, args.groupId)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'inviteToJoin', seqid)
      end

      def process_applyToJoin(seqid, iprot, oprot)
        args = read_args(iprot, ApplyToJoin_args)
        result = ApplyToJoin_result.new()
        begin
          result.success = @handler.applyToJoin(args.token, args.requestTime, args.sign, args.groupId)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'applyToJoin', seqid)
      end

      def process_passInviteOrApply(seqid, iprot, oprot)
        args = read_args(iprot, PassInviteOrApply_args)
        result = PassInviteOrApply_result.new()
        begin
          result.success = @handler.passInviteOrApply(args.token, args.requestTime, args.sign, args.resouceId)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'passInviteOrApply', seqid)
      end

      def process_refuseInviteOrApply(seqid, iprot, oprot)
        args = read_args(iprot, RefuseInviteOrApply_args)
        result = RefuseInviteOrApply_result.new()
        begin
          result.success = @handler.refuseInviteOrApply(args.token, args.requestTime, args.sign, args.resouceId)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'refuseInviteOrApply', seqid)
      end

      def process_myGroupFeeds(seqid, iprot, oprot)
        args = read_args(iprot, MyGroupFeeds_args)
        result = MyGroupFeeds_result.new()
        begin
          result.success = @handler.myGroupFeeds(args.token, args.requestTime, args.sign)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'myGroupFeeds', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Create_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      GROUPNAME = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        GROUPNAME => {:type => ::Thrift::Types::STRING, :name => 'groupName'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Create_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SearchMyGroup_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      SEARCHPARAM = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        SEARCHPARAM => {:type => ::Thrift::Types::STRUCT, :name => 'searchParam', :class => ::Blublu::GroupSearchParam}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SearchMyGroup_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Blublu::GroupInfo}},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Search_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      GROUPNAME = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        GROUPNAME => {:type => ::Thrift::Types::STRING, :name => 'groupName'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Search_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Blublu::GroupInfo}},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InviteToJoin_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      EMAIL = 4
      GROUPID = 5

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
        GROUPID => {:type => ::Thrift::Types::I64, :name => 'groupId'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InviteToJoin_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ApplyToJoin_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      GROUPID = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        GROUPID => {:type => ::Thrift::Types::I64, :name => 'groupId'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ApplyToJoin_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PassInviteOrApply_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      RESOUCEID = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        RESOUCEID => {:type => ::Thrift::Types::I64, :name => 'resouceId'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PassInviteOrApply_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RefuseInviteOrApply_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3
      RESOUCEID = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        RESOUCEID => {:type => ::Thrift::Types::I64, :name => 'resouceId'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RefuseInviteOrApply_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MyGroupFeeds_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUESTTIME = 2
      SIGN = 3

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUESTTIME => {:type => ::Thrift::Types::I64, :name => 'requestTime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MyGroupFeeds_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Blublu::GroupFeed}},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
