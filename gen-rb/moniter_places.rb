#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'moniter_places_types'

module Blublu
  module MoniterPlaces
    class Client
      include ::Thrift::Client

      def getMyPlaces(token, request_datetime, sign, start)
        send_getMyPlaces(token, request_datetime, sign, start)
        return recv_getMyPlaces()
      end

      def send_getMyPlaces(token, request_datetime, sign, start)
        send_message('getMyPlaces', GetMyPlaces_args, :token => token, :request_datetime => request_datetime, :sign => sign, :start => start)
      end

      def recv_getMyPlaces()
        result = receive_message(GetMyPlaces_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMyPlaces failed: unknown result')
      end

      def addPlace(token, request_datetime, sign, place_name)
        send_addPlace(token, request_datetime, sign, place_name)
        return recv_addPlace()
      end

      def send_addPlace(token, request_datetime, sign, place_name)
        send_message('addPlace', AddPlace_args, :token => token, :request_datetime => request_datetime, :sign => sign, :place_name => place_name)
      end

      def recv_addPlace()
        result = receive_message(AddPlace_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addPlace failed: unknown result')
      end

      def upload(token, request_datetime, sign, place_id, time, bytes)
        send_upload(token, request_datetime, sign, place_id, time, bytes)
        return recv_upload()
      end

      def send_upload(token, request_datetime, sign, place_id, time, bytes)
        send_message('upload', Upload_args, :token => token, :request_datetime => request_datetime, :sign => sign, :place_id => place_id, :time => time, :bytes => bytes)
      end

      def recv_upload()
        result = receive_message(Upload_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'upload failed: unknown result')
      end

      def getMoniterImages(token, request_datetime, sign, place_ids, max_image_id)
        send_getMoniterImages(token, request_datetime, sign, place_ids, max_image_id)
        return recv_getMoniterImages()
      end

      def send_getMoniterImages(token, request_datetime, sign, place_ids, max_image_id)
        send_message('getMoniterImages', GetMoniterImages_args, :token => token, :request_datetime => request_datetime, :sign => sign, :place_ids => place_ids, :max_image_id => max_image_id)
      end

      def recv_getMoniterImages()
        result = receive_message(GetMoniterImages_result)
        return result.success unless result.success.nil?
        raise result.ouch unless result.ouch.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMoniterImages failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_getMyPlaces(seqid, iprot, oprot)
        args = read_args(iprot, GetMyPlaces_args)
        result = GetMyPlaces_result.new()
        begin
          result.success = @handler.getMyPlaces(args.token, args.request_datetime, args.sign, args.start)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'getMyPlaces', seqid)
      end

      def process_addPlace(seqid, iprot, oprot)
        args = read_args(iprot, AddPlace_args)
        result = AddPlace_result.new()
        begin
          result.success = @handler.addPlace(args.token, args.request_datetime, args.sign, args.place_name)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'addPlace', seqid)
      end

      def process_upload(seqid, iprot, oprot)
        args = read_args(iprot, Upload_args)
        result = Upload_result.new()
        begin
          result.success = @handler.upload(args.token, args.request_datetime, args.sign, args.place_id, args.time, args.bytes)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'upload', seqid)
      end

      def process_getMoniterImages(seqid, iprot, oprot)
        args = read_args(iprot, GetMoniterImages_args)
        result = GetMoniterImages_result.new()
        begin
          result.success = @handler.getMoniterImages(args.token, args.request_datetime, args.sign, args.place_ids, args.max_image_id)
        rescue ::Blublu::InvalidOperation => ouch
          result.ouch = ouch
        end
        write_result(result, oprot, 'getMoniterImages', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class GetMyPlaces_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUEST_DATETIME = 2
      SIGN = 3
      START = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUEST_DATETIME => {:type => ::Thrift::Types::I64, :name => 'request_datetime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        START => {:type => ::Thrift::Types::I32, :name => 'start'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetMyPlaces_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Blublu::MoniterPlaceInfo}},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddPlace_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUEST_DATETIME = 2
      SIGN = 3
      PLACE_NAME = 4

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUEST_DATETIME => {:type => ::Thrift::Types::I64, :name => 'request_datetime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        PLACE_NAME => {:type => ::Thrift::Types::STRING, :name => 'place_name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddPlace_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Blublu::OperResult},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Upload_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUEST_DATETIME = 2
      SIGN = 3
      PLACE_ID = 4
      TIME = 5
      BYTES = 6

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUEST_DATETIME => {:type => ::Thrift::Types::I64, :name => 'request_datetime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        PLACE_ID => {:type => ::Thrift::Types::I64, :name => 'place_id'},
        TIME => {:type => ::Thrift::Types::I64, :name => 'time'},
        BYTES => {:type => ::Thrift::Types::STRING, :name => 'bytes', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Upload_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Blublu::OperResult},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetMoniterImages_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOKEN = 1
      REQUEST_DATETIME = 2
      SIGN = 3
      PLACE_IDS = 4
      MAX_IMAGE_ID = 5

      FIELDS = {
        TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
        REQUEST_DATETIME => {:type => ::Thrift::Types::I64, :name => 'request_datetime'},
        SIGN => {:type => ::Thrift::Types::STRING, :name => 'sign'},
        PLACE_IDS => {:type => ::Thrift::Types::LIST, :name => 'place_ids', :element => {:type => ::Thrift::Types::I64}},
        MAX_IMAGE_ID => {:type => ::Thrift::Types::I64, :name => 'max_image_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetMoniterImages_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      OUCH = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Blublu::MoniterImage}},
        OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::Blublu::InvalidOperation}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
